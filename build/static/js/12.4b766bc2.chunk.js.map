{"version":3,"sources":["actionCreator/adsActions.js","views/Ads/AdCreationForm.js"],"names":["setAdData","payload","type","adsAction","setAdId","AdCreationForm","props","name","vastUrl","width","height","dispatch","useDispatch","useInput","handleValidation","validations","EMPTY","NUMBER","useState","adId","setAd_Id","alert","useAlert","submit","useSubmit","formData","parseInt","console","log","apiPost","backendRoutes","ADS","data","successRes","id","changeVisibility","handleMessage","setTimeout","errorRes","response","message","messages","NETWORK_FAILURE","createAds","className","xl","color","isOpen","isVisible","toggle","noValidate","addonType","placeholder","autoComplete","disabled","helperText","block","onClick","history","push","pathname","frontendRoutes","createAdQuestions","path","state","creative_id","questions"],"mappings":"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","file":"static/js/12.4b766bc2.chunk.js","sourcesContent":["import { adsAction } from '../actions';\r\n\r\nexport const setAdData = (payload) => {\r\n    // console.log(\"Data in payload\", payload)\r\n    return {type: adsAction.setAdData, payload};\r\n}\r\n\r\nexport const setAdId = (payload) => {\r\n    return {type: adsAction.setAdId, payload};\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  Col,\r\n  Row,\r\n  Form,\r\n  InputGroup,\r\n  InputGroupAddon,\r\n  Input,\r\n  InputGroupText,\r\n  Button,\r\n  FormFeedback,\r\n  Alert,\r\n  CardFooter,\r\n} from \"reactstrap\";\r\nimport { useInput, useSubmit } from \"../../hooks/form\";\r\nimport { handleValidation, validations } from \"../../utils/validations\";\r\nimport { backendRoutes, frontendRoutes, messages, userTypes } from \"../../utils/constants\";\r\nimport { apiPost, apiGet } from \"../../utils/serviceManager\";\r\nimport useAlert from \"../../hooks/useAlert\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setAdId } from \"../../actionCreator/adsActions\";\r\n\r\nexport default function AdCreationForm(props) {\r\n  let name, vastUrl, width, height;\r\n  const dispatch = useDispatch()\r\n  name = useInput(\"name\", \"\", handleValidation, validations.EMPTY);\r\n  vastUrl = useInput(\"vast_url\", \"\", handleValidation, validations.EMPTY);\r\n  width = useInput(\"width\", \"\", handleValidation, validations.NUMBER);\r\n  height = useInput(\"height\", \"\", handleValidation, validations.NUMBER);\r\n\r\n  const [adId, setAd_Id] = useState('')\r\n\r\n  const alert = useAlert(false);\r\n  const submit = useSubmit([name, vastUrl, height, width], handleSuccess);\r\n\r\n  function handleSuccess(formData) {\r\n    formData = { ...formData, height: parseInt(formData.height), width: parseInt(formData.width) }\r\n    console.log(\"Data Length==> \", formData);\r\n    createAds(formData)\r\n    // name.clearInput();\r\n    // vastUrl.clearInput();\r\n    // height.clearInput();\r\n    // width.clearInput();\r\n  }\r\n\r\n  function handleAlertVisibility() {\r\n    alert.changeVisibility(false);\r\n  }\r\n\r\n  function createAds(formData) {\r\n    apiPost(\r\n      backendRoutes.ADS + 'insert',\r\n      { data: formData },\r\n      {\r\n        \"Content-Type\": \"application/json\",\r\n        //Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n      },\r\n      successRes => {\r\n        console.log(\"Ad creation success: \", successRes);\r\n        setAd_Id(successRes.data.id)\r\n        alert.changeVisibility(true);\r\n        alert.handleMessage(\"Ad created successfully.\");\r\n        setTimeout(() => {\r\n          alert.changeVisibility(false);\r\n        }, 5000);\r\n      },\r\n      errorRes => {\r\n        console.log(\"campaign creation error: \", errorRes);\r\n        if (errorRes.response && errorRes.response.data) {\r\n          alert.handleMessage(errorRes.response.data.message);\r\n        } else {\r\n          alert.handleMessage(messages.NETWORK_FAILURE);\r\n        }\r\n        setTimeout(() => {\r\n          alert.changeVisibility(false);\r\n        }, 5000);\r\n      }\r\n    )\r\n  }\r\n\r\n  function goToCreateQues() {\r\n    dispatch(setAdId(adId))\r\n    props.history.push({\r\n      pathname: frontendRoutes.createAdQuestions.path,\r\n      state: { data: { creative_id: adId, questions: [] } },\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div className=\"animated fadeIn\" >\r\n      <Row>\r\n        <Col xl=\"8\">\r\n          <Card>\r\n            <CardHeader>\r\n              <i className=\"fa fa-align-justify\"></i> Ads{\" \"}\r\n              <small className=\"text-muted\">creation form</small>\r\n            </CardHeader>\r\n            <CardBody>\r\n              <Alert\r\n                color=\"danger\"\r\n                isOpen={alert.isVisible}\r\n                toggle={handleAlertVisibility}\r\n              >\r\n                {alert.message}\r\n              </Alert>\r\n              <Form noValidate {...submit.props}>\r\n                <h1>Register</h1>\r\n                <p className=\"text-muted\">Create an Ad</p>\r\n                <InputGroup className=\"mb-3\">\r\n                  <InputGroupAddon addonType=\"prepend\">\r\n                    <InputGroupText>\r\n                      <i className=\"icon-screen-desktop\"></i>\r\n                    </InputGroupText>\r\n                  </InputGroupAddon>\r\n                  <Input\r\n                    type=\"text\"\r\n                    placeholder=\"Name\"\r\n                    autoComplete=\"on\"\r\n                    {...name.props}\r\n                    disabled={adId ? true : false}\r\n                  />\r\n                  <FormFeedback>{name.helperText}</FormFeedback>\r\n                </InputGroup>\r\n                <InputGroup className=\"mb-3\">\r\n                  <InputGroupAddon addonType=\"prepend\">\r\n                    <InputGroupText>\r\n                      <i className=\"icon-calendar\"></i>\r\n                    </InputGroupText>\r\n                  </InputGroupAddon>\r\n                  <Input\r\n                    type=\"text\"\r\n                    placeholder=\"Vast url\"\r\n                    autoComplete=\"off\"\r\n                    disabled={adId ? true : false}\r\n                    {...vastUrl.props}\r\n                  />\r\n                  <FormFeedback>{vastUrl.helperText}</FormFeedback>\r\n                </InputGroup>\r\n                <InputGroup className=\"mb-3\">\r\n                  <InputGroupAddon addonType=\"prepend\">\r\n                    <InputGroupText>\r\n                      <i className=\"icon-chart\"></i>\r\n                    </InputGroupText>\r\n                  </InputGroupAddon>\r\n                  <Input\r\n                    type=\"text\"\r\n                    placeholder=\"Ad Width\"\r\n                    autoComplete=\"off\"\r\n                    disabled={adId ? true : false}\r\n                    {...width.props}\r\n                  />\r\n                  <FormFeedback>{width.helperText}</FormFeedback>\r\n                </InputGroup>\r\n                <InputGroup className=\"mb-3\">\r\n                  <InputGroupAddon addonType=\"prepend\">\r\n                    <InputGroupText>\r\n                      <i className=\"icon-chart\"></i>\r\n                    </InputGroupText>\r\n                  </InputGroupAddon>\r\n                  <Input\r\n                    type=\"text\"\r\n                    placeholder=\"Ad Height\"\r\n                    autoComplete=\"off\"\r\n                    disabled={adId ? true : false}\r\n                    {...height.props}\r\n                  />\r\n                  <FormFeedback>{height.helperText}</FormFeedback>\r\n                </InputGroup>\r\n                <Button color=\"success\" block disabled={adId ? true : false}>\r\n                  Create Ad\r\n                </Button>\r\n              </Form>\r\n            </CardBody>\r\n            {/* <CardFooter>\r\n              <Button color=\"info\" onClick={goToCreateQues}>Add Questions</Button>\r\n            </CardFooter> */}\r\n            {\r\n              adId ? (\r\n                <CardFooter>\r\n                  <Button color=\"info\" onClick={goToCreateQues}>Add Questions</Button>\r\n                </CardFooter>\r\n              ) : null\r\n            }\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n"],"sourceRoot":""}